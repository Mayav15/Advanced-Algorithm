#include <stdio.h>
#include <time.h>
#include <stdlib.h>

// function to swap elements
void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}

//random number generator between two numbers
int random_in_range(int start,int end){
    return start + rand()%(end-start+1);
}

// function to find the partition position
int partition(int array[], int low, int high) {
  int pivot = array[high];
  int i = (low - 1);
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
      i++;
      swap(&array[i], &array[j]);
    }
  }
  swap(&array[i + 1], &array[high]);
  return (i + 1);
}

// function to randomize before performing quicksort
int randomized_partition(int array[], int low, int high){
  int r = random_in_range(low,high);
  swap(&array[r],&array[high]);
  return partition(array,low,high);
}

void randomized_quickSort(int array[], int low, int high) {
  if (low < high) {
    int pi = randomized_partition(array, low, high);
    randomized_quickSort(array, low, pi - 1);
    randomized_quickSort(array, pi + 1, high);
  }
}

void quickSort(int array[], int low, int high) {
  if (low < high) {
    int pi = partition(array, low, high);
    quickSort(array, low, pi - 1);
    quickSort(array, pi + 1, high);
  }
}

// function to print array elements
void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}

// main function
int main() {
  int data_1[] = {8, 7, 2, 1, 0, 9, 6,-4, 23, 22};
  int data_2[] = {8, 7, 2, 1, 0, 9, 6,-4, 23, 22};
  
  int n = sizeof(data_1) / sizeof(data_1[0]);
  double time_spent_1 = 0.0,time_spent_2 = 0.0;
  clock_t begin,end;
  
  printf("** Normal Quicksort **\n");
  printf("Unsorted Array\n");
  printArray(data_2, n);
  begin = clock();
  quickSort(data_2, 0, n - 1);
  end = clock();
  printf("Sorted array in ascending order: \n");
  printArray(data_2, n);
  time_spent_1 += (double)(end - begin) / CLOCKS_PER_SEC;
  printf("\n");
  
  printf("** Randomized Quicksort **\n");
  printf("Unsorted Array\n");
  printArray(data_1, n);
  begin = clock();
  randomized_quickSort(data_1, 0, n - 1);
  end = clock();
  printf("Sorted array in ascending order: \n");
  printArray(data_1, n);
  time_spent_2 += (double)(end - begin) / CLOCKS_PER_SEC;
  printf("\n");
  
  
  printf("Time for Normal Quicksort:\t%f seconds\n",time_spent_1);
  printf("Time for Randomized Quicksort:\t%f seconds\n",time_spent_2);
  
  return 0;
}




