import java.util.ArrayList;
import java.util.Stack;
import java.util.Scanner;
import java.util.Random;

public class FordFulkerson{
    int n;
    int parent[];
    int graph_main[][];
    
    public FordFulkerson(int n, int graph_main[][]){
        this.n = n;
        this.graph_main = graph_main;
        this.parent = new int[n];
    }
    public static int random_generator(ArrayList<Integer> neighbour) {
        int rnd = new Random().nextInt(neighbour.size());
        return rnd;
    }
    public boolean random_path(int source, int destination, int graph[][]){
        boolean visited[] = new boolean[n];
        Stack<Integer> stack = new Stack<Integer>();
        for(int i=0;i<n;i++){
            visited[i]=false;
            parent[i]=-1;
        }
        stack.push(source);
        while(!stack.isEmpty()){
            int current = stack.pop();
            if(!visited[current]){
                visited[current]=true;
                ArrayList<Integer> neighbour = new ArrayList<Integer>();
                for(int i=n-1;i>=0;i--){
                    if(graph[current][i]>0 && !visited[i]){
                        neighbour.add(i);
                    }
                }
                while(!neighbour.isEmpty()){
                    int x = random_generator(neighbour);
                    int y = neighbour.remove(x);
                    stack.push(y);
                    parent[y]=current;
                }
            }
        }
        return visited[destination];
    }
    public int fordFulkerson(int source, int sink){
        int max_flow = 0;
        int residual_graph[][] = new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                residual_graph[i][j] = graph_main[i][j];
            }
        }
        System.out.println("Starting Graph:");
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                System.out.print(residual_graph[i][j]+" ");
            }
            System.out.println();
        }
        System.out.println();
        while(random_path(source,sink,residual_graph)){
            int min_flow = Integer.MAX_VALUE;
            System.out.print("Chosen Augmented Path: ");
            for(int s=sink;s!=source;s=parent[s]){
                System.out.print(s+"<-");
                int p = parent[s];
                min_flow = Math.min(min_flow,residual_graph[p][s]);
            }
            System.out.println(source);
            for(int s=sink;s!=source;s=parent[s]){
                int p = parent[s];
                residual_graph[p][s]-=min_flow;
                residual_graph[s][p]+=min_flow;
            }
            System.out.println("Updated Graph:");
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    System.out.print(residual_graph[i][j]+" ");
                }
                System.out.println();
            }
            System.out.println("Flow: "+min_flow);
            max_flow += min_flow;
            System.out.println();
        }
        return max_flow;
    }
    
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no. of nodes: ");
        int n = sc.nextInt();
        System.out.println("Enter graph: ");
        int graph[][] = new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                graph[i][j] = sc.nextInt();
            }
        }
        System.out.println("Label nodes from 0 to "+(n-1));
        System.out.print("Enter source node: ");
        int source = sc.nextInt();
        System.out.print("Enter sink node: ");
        int sink = sc.nextInt();
        System.out.println();
        
        FordFulkerson ff = new FordFulkerson(n,graph);
        int max_flow = ff.fordFulkerson(source, sink);
        
        System.out.println();
        System.out.println("Maximum Flow: "+max_flow);
    }
}